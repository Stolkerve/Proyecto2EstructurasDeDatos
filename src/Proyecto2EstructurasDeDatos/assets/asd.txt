Complemento de software para el diseño de fundaciones.
Autores
Raquel Sandoval
Iván Loscher
Christian Guillén-Drija
Resumen
El adelanto tecnológico presente hoy en día ha traído una gran cantidad de herramientas útiles para losingenieros, incorporando el uso de sistemas de información para la toma de decisiones en los procesosde cálculo y la visualización de materiales creados a través de los cálculos; así como avanza lastecnologías a usar, también deben actualizarse las herramientas para asegurar su durabilidad yfiabilidad en el tiempo. El siguiente trabajo presenta una herramienta que, con ayuda de métodos decálculo existentes para fundaciones directas e indirectas, genera el diseño de las mismas en conjunto através de valores ingresados por el usuario, estableciendo así un medio en el que pueda visualizarse demanera eficiente y sencilla los resultados del cálculo previamente establecido, pues automatiza elproceso de dibujo y cálculo en AutoCAD. Dicha herramienta se implementó como un complemento oextensión de software que permite el diseño y dibujo de las fundaciones con base en las librerías,funciones y modelos de AutoCAD. La extensión obtenida puede ser modificada en el tiempo paraextender sus funcionalidades. La misma implementa diversos métodos para diseño de fundaciones,entre los que se cuenta Caquot-Kerisel y Meyerhof, aplicado en las fundaciones indirectas. En el casode las fundaciones directas, implementa el método de Terzaghi y Vesic. Igualmente, se realizó unmodelo de cálculo para el diseño de todas las fundaciones de la estructura, el cual fue implementado enel complemento obtenido en este trabajo de investigación.
Palabras claves: fundaciones directas, AutoCAD, complemento, C#, 
Arquitectura referencial para mecanismos de Internacionalización y localización en PHP.
Autores
Christian Guillén Drija
Andrea Pérez
Carlos Maldonado
Resumen
Los procesos de internacionalización y localización inciden directamente en la usabilidad de un sistema web alfacilitar su adaptación a diferentes elementos culturales tales como la moneda, idioma, formato de fecha, sistemade medidas, entre otros. Algunos frameworks para aplicaciones web cuentan con soporte para dichos procesos.Sin embargo, en muchas ocasiones, la información sobre la arquitectura de los mecanismos utilizados en cadaframework, así como su funcionamiento interno resulta insuficiente. La arquitectura de software se correspondea visión abstracta de un sistema en la que se representan los componentes del mismo, el comportamiento de cadauno de dichos elementos y la forma en que se relacionan. Su uso adecuado conlleva a la disminución de loscostos de manutención del software, mayor facilidad en la toma de decisiones de diseño, disminución de lasfallas, entre otras ventajas. Por otra parte, la generación de una Arquitectura de Referencia (AR), es el productocon mayor relevancia generado en la etapa de Análisis del Dominio (AD), dentro de la denominada disciplina deIngeniería del Dominio (ID), la cual tiene gran relevancia para el desarrollo de software basado en componentes.En este trabajo, se aplica un AD, asumiendo un enfoque ascendente (“bottom-up”) sobre una muestra deframeworks de desarrollo para PHP, específicamente centrado en los mecanismos que cada frameworkimplementa para posibilitar la internacionalización y la localización en aplicaciones web. Para lograr lo anterior,se aplicó ingeniería inversa sobre las distintas arquitecturas y se modelaron en UML. Del análisis de las variantese invariantes de las mismas, se obtuvo una Arquitectura de Referencia para un subsistema deinternacionalización y localización. Si bien la muestra de arquitecturas analizadas en este trabajo secircunscriben a frameworks de desarrollo en PHP, la Arquitectura de Referencia obtenida puede ser consideradade carácter genérico, con el suficiente nivel de abstracción de manera que pueda ser asumida como unaarquitectura base sobre la cual comenzar un desarrollo basado en componentes; sin embargo, su validación puederealizarse a través de la ampliación de la muestra inicial de frameworks seleccionados y el análisis de lasposibles variantes que puedan generarse. No obstante, la Arquitectura de Referencia obtenida en este ejercicio deAnálisis de Dominio puede utilizarse como referente dentro de una organización para evaluar la mejor opción almomento de seleccionar la alternativa arquitectónica más robusta al considerar un conjunto de frameworks dedesarrollo.
Palabras claves: análisis de dominio, ingeniería de dominio, PHP arquitectura referencial, internacionalización y localización, 
Sistema de diseño basado en Grid
Autores
José Invernón
Christian Guillén-Drija
Resumen
Los frameworks de diseño son conjuntos articulados de elementos y componentes gráficos que se rigenpor patrones o guías de diseño. Estos favorecen el desarrollo rápido de aplicaciones web sobre la basede criterios de diseño consistentes. La mayoría de los frameworks de Frontend, basan suimplementación en elementos que se distribuyen en una sola dimensión, es decir, hacen uso deFlexbox, lo cual limita el control estructural del contenido. El presente estudio, estuvo centrado en larealización de un sistema de diseño basado en Grid para interfaces gráficas de aplicaciones web. Paraello, se categorizaron los elementos de las guías de diseño de UX/UI del sistema planteado, los cualescomponen los patrones que permiten definir el estilo de sus componentes. Posteriormente, se hizo unacomparación entre los siguientes frameworks: Bootstrap, Clarity Design y Material Design, con el finde seleccionar los componentes de interfaz que constituyesen el sistema de diseño propuesto en estetrabajo de investigación. En una siguiente fase, se procedió a construir tales componentes con base enlas propiedades de Grid. Además, se construyó un caso de estudio al que se le aplicó un conjunto deescenarios de pruebas que permitió validar la efectividad del sistema de diseño basado en Grid comoherramienta para la construcción de los componentes de interfaz de usuario en el ámbito del desarrollode aplicaciones Web. Posteriormente el sistema de diseño obtenido se aplicó a un caso de estudio queconsistió en un catálogo de componentes y guías de estilo. Ambos productos son de dominio público,de manera que los potenciales usuarios del sistema de diseño pueden acceder de manera gratuita a lahoja de estilo que especifica las clases constituyentes, así como a una documentación detallada yextensa sobre su uso. Esta investigación permitió demostrar que es posible diseñar componentes deinterfaz de usuario basados en propiedades Grid. Dichas propiedades permiten ordenar y posicionar loselementos del HTML de forma práctica y sencilla, haciendo uso de dos dimensiones; además defacilitar el desarrollo de sitios web responsivos. Aun cuando es posible crear elementos de interfaz deusuario solo con la propiedad Grid, como se demostró en este trabajo, su combinación con Flexbox,potencia la creación tanto de componentes como de aplicaciones debido a que con el primero, se definela estructura y con el segundo, se distribuye el contenido en cada sección.
Palabras claves: diseño, componentes, sistema de diseño, Grid, hojas de estilo, UX/UI, 
GraphQL vs REST: una comparación desde la perspectiva de eficiencia de desempeño.
Autores
Christian Guillén Drija
Reynaldo Quintero
Asher Kleiman
Resumen
El estilo arquitectónico conocido como Transferencia de Estado Representacional (REST según sus siglas eninglés) ha modelado y estandarizado la comunicación cliente-servidor a través del protocolo de transferencia dehipertexto (HTTP). Según Roy Fielding, creador de REST, este estilo consiste en un conjunto de restriccionesarquitectónicas que enfatizan la escalabilidad de las interacciones entre los componentes, así co mo lageneralidad las interfaces utilizadas, el despliegue independiente de dichos componentes, la aplicación decomponentes intermediarios para la reducción de la latencia, la preponderancia de la seguridad y laencapsulación de los sistemas Legacy. Como consecuencia, REST se ha convertido en el estilo más aplicado enla comunicación con una Interfaz de Programación de Aplicaciones (API). Por otra parte, GraphQL es unatecnología basada en un lenguaje de consultas de datos para API’s que se ha constituido en una alternativa alestilo REST. En este trabajo de investigación, se realizó una comparación de REST y GraphQL comomecanismos arquitectónicos desde una perspectiva de calidad, específicamente centrada en la Eficiencia deDesempeño, en el marco del estándar ISO/IEC 9126 e ISO/IEC 25000. Las subcaracterísticas de Eficiencia deDesempeño evaluadas fueron: Comportamiento Temporal, Utilización de Recursos y Capacidad. Para cada unade dichas subcaracterísticas, se aplicaron métricas, a saber: para el Comportamiento Temporal se aplicaron lasmétricas Tiempo de Respuesta y Rendimiento; para la Utilización de Recursos, se aplicaron las métricas:Utilización de la Memoria, Utilización de Caché, Overfetching y Underfetching; y para Capacidad, se aplicaronlas métricas Capacidad y Velocidad Bajo Estrés. Para el desarrollo de este trabajo se seleccionó un caso deestudio que permitiera evidenciar las características de los dos mecanismos. Asimismo, para la obtención dedatos cuantitativos que permitiesen establecer comparaciones, se diseñaron dos API’s que con base en el caso deestudio escogido, respondieran fielmente a las restricciones que caracterizan a los dos mecanismosarquitectónicos. Los resultados obtenidos, una vez ejecutados los casos de prueba, permiten inferir que RESTposee una mayor rapidez de respuesta que GraphQL. Debido a la naturaleza dinámica de las peticiones quepueden realizarse en las que se puede especificar con mayor granularidad la información requerida a través deconsultas anidadas, GraphQL parece ser más eficiente en lo relativo al underfetching y al overfetching. Engeneral, GraphQL debería utilizarse cuando se requiere menor utilización de la memoria, cuando los recursosque la API maneja están estrechamente relacionados y cuando no sea necesario utilizar la totalidad de lainformación obtenida. Por otra parte, REST debería utilizarse en caso de necesitarse mayor velocidad derespuesta y cuando se requiera utilizar la totalidad de la información de los recursos manejados.
Palabras claves: REST, GraphQL, cliente-servidor, mecanismo arquitectónico, calidad de software, 
How to write reflection for C++
Autores
Sergey Larin
Resumen
C++ is a truly controversial language. Good ol' C was created in 1972. C++ appeared in 1985 and had backward compatibility with C. Since then, C++ was pronounced dead many times: Java did it first, then Go and Rust. All disadvantages of C++ were discussed many times.
Palabras claves: Desarializacion, Serializacion, Reflection, C++, 
Cómo leer bytes de una coneccion tcp sin morir en el intento
Autores
Sebastian Gonzalez Rada (Yo)
Resumen
Resulta ser que existe un protocolo de comunicación llamado tcp y nuestros sistemas operativos se encargan completamente de eso y nos deja una interfaz para abrir puertos, esperar comunicaciones, leer bytes y escribir bytes. Muy fácil ¿no? Bueno, abrir el puerto, esperar por conexiones y escribir bytes es muy fácil, no obstante, leer bytes es complicado. La razón es por que siempre estamos recibiendo un número de bytes desconocido, porque al fin y a cabo enviar datos lleva tiempo y nunca podemos esperar que cumplan ciertas reglas que tengamos en la lectura de bytes. La solución es crear un esquema de header y data en nuestros paquetes. En la sección de header en nuestro paquete estamos codificando un número entero sin signo de 32 o 64 bits como el tamaño en bytes de data (32 bits nos permite un tamaño máximo de data por paquete de 4.29 gigabytes y 64 bits 18446 petabytes como máximo). De esta manera ya podemos saber el tamaño de datos que nos envían, un ejemplo en código de rust sería así. En cuanto de la robustez de nuestro esquema, resulta ser muy buena por que aunque leamos datos no codificados con nuestro esquema, el decodificador del header no le importa, pero cuando decodificamos la data nos tirara un error por que está recibiendo basura que no entiende.
Palabras claves: Tcp, Conecciones, Codificacion, Decodificacion, Bytes, 
